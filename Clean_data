USE ROLE sysadmin;
USE WAREHOUSE compute_wh;
USE SCHEMA cricket.clean;

--> Step-1
--> The meta column has no real domain value and just capture the JSON file version, since it is an object data type
--> Hete is the select statement thet can extract each element
--> Extract element from object data type
SELECT 
   meta['data_version']::TEXT AS data_version,
   meta['created']::DATE AS created,
   meta['revision']::NUMBER AS revision
FROM 
   cricket.raw.match_raw_tbl;

--> Step-2
--> Exteact elements from info column that is of variant data type it has lot of important infomation and we need to analyse them.

SELECT 
    info:match_type_number::INT AS match_type_number,
    info:match_type::TEXT AS match_type,
    info:season::TEXT AS season,
    info:team_type::TEXT AS team_type,
    info:overs::TEXT AS overs,
    info:city:: TEXT AS city,
    info:venue::TEXT AS venue
FROM
   cricket.raw.match_raw_tbl;

-->
SELECT
   info:match_type_number::INT AS match_type_number,
   info:event.name::TEXT AS event_name,
   CASE
   WHEN
        info:event.match_number::TEXT IS NOT NULL THEN info:event.match_number::TEXT
   WHEN
       info:event.stage::TEXT IS NOT NULL THEN info:event.stage::text
   ELSE
       'NA'
   END AS match_stage,
   info:dates[0]::date AS event_date,
   DATE_PART('year',info:dates[0]::date) AS event_year,
   DATE_PART('month',info:dates[0]::date) AS event_month,
   DATE_PART('day',info:dates[0]::date) AS event_day,
   info:match_type::TEXT AS match_type,
   info:season::TEXT AS season,
   info:team_type::TEXT AS team_type,
   info:overs::TEXT AS overs,
   info:city::TEXT AS city,
   info:venue:: TEXT AS venue,
   info:gender::TEXT AS gender,
   info:teams[0]::TEXT AS first_team,
   info:teams[1]::TEXT AS second_team,
   CASE
       WHEN info:outcome.winner IS NOT NULL THEN 'Result Declared'
       WHEN info:outcome.result = 'tie' THEN 'Tie'
       WHEN info:outcome.result = 'no result' THEN 'No Result'
       ELSE info:outcome.result
   END AS match_result,
   CASE
       WHEN info:outcome.winner IS NOT NULL THEN info:outcome.winner
       ELSE 'NA'
   END AS winner ,  

   info:toss.winner::TEXT AS  toss_winner,
   INITCAP(info:toss.decision::TEXT) AS toss_decision
FROM 
   cricket.raw.match_raw_tbl;

--> Explain the json file befor coming to this query
CREATE OR REPLACE TRANSIENT TABLE cricket.clean.match_detail_clean AS
SELECT
   info:match_type_number::INT AS match_type_number,
   info:event.name::TEXT AS event_name,
   CASE
   WHEN
        info:event.match_number::TEXT IS NOT NULL THEN info:event.match_number::TEXT
   WHEN
       info:event.stage::TEXT IS NOT NULL THEN info:event.stage::text
   ELSE
       'NA'
   END AS match_stage,
   info:dates[0]::date AS event_date,
   DATE_PART('year',info:dates[0]::date) AS event_year,
   DATE_PART('month',info:dates[0]::date) AS event_month,
   DATE_PART('day',info:dates[0]::date) AS event_day,
   info:match_type::TEXT AS match_type,
   info:season::TEXT AS season,
   info:team_type::TEXT AS team_type,
   info:overs::TEXT AS overs,
   info:city::TEXT AS city,
   info:venue:: TEXT AS venue,
   info:gender::TEXT AS gender,
   info:teams[0]::TEXT AS first_team,
   info:teams[1]::TEXT AS second_team,
   CASE
       WHEN info:outcome.winner IS NOT NULL THEN 'Result Declared'
       WHEN info:outcome.result = 'tie' THEN 'Tie'
       WHEN info:outcome.result = 'no result' THEN 'No Result'
       ELSE info:outcome.result
   END AS match_result,
   CASE
       WHEN info:outcome.winner IS NOT NULL THEN info:outcome.winner
       ELSE 'NA'
   END AS winner ,  

   info:toss.winner::TEXT AS  toss_winner,
   INITCAP(info:toss.decision::TEXT) AS toss_decision,

   stg_file_name,
   stg_file_row_number,
   stg_file_hashkey,
   stg_modified_ts
FROM 
   cricket.raw.match_raw_tbl;

   
--> Extract players
--> Version-1
SELECT 
    raw.info:match_type_number::INT AS match_type_number,
    raw.info:players,
    raw.info:teams
FROM cricket.raw.match_raw_tbl raw;    

--> Version-2
SELECT 
    raw.info:match_type_number::INT AS match_type_number,
    raw.info:players,
    raw.info:teams
FROM cricket.raw.match_raw_tbl raw
WHERE match_type_number = 2729;

--> Version-3
SELECT 
    raw.info:match_type_number::INT AS match_type_number,
    p.*
    -- p.key::TEXT AS country
FROM cricket.raw.match_raw_tbl raw,
LATERAL FLATTEN (input => raw.info:players) p
WHERE match_type_number = 2729;

--> Version-4
SELECT
    raw.info:match_type_number::INT AS match_type_number,
    p.key::TEXT AS country,
    team.*
    -- team.value::TEXT AS player_name
FROM cricket.raw.match_raw_tbl raw,
LATERAL FLATTEN (input => raw.info:players) p,
LATERAL FLATTEN (input => p.value) team
WHERE match_type_number = 2729;

--> Version-5
CREATE OR REPLACE TABLE cricket.clean.player_clean_tbl AS
SELECT
    raw.info:match_type_number::INT AS match_type_number,
    p.key::TEXT AS country,
    team.value::TEXT AS player_name,
    stg_file_name,
    stg_file_row_number,
    stg_file_hashkey,
    stg_modified_ts
FROM cricket.raw.match_raw_tbl raw,
LATERAL FLATTEN (input => raw.info:players) p,
LATERAL FLATTEN (input => p.value) team;

--> lets desc table
DESC TABLE cricket.clean.player_clean_tbl;

SELECT GET_DDL('table','cricket.clean.player_clean_tbl');

SELECT * FROM cricket.clean.player_clean_tbl;

--> add not null and fk relationship
ALTER TABLE cricket.clean.player_clean_tbl
MODIFY COLUMN match_type_number SET NOT NULL;

ALTER TABLE cricket.clean.player_clean_tbl
MODIFY COLUMN country SET NOT NULL;

ALTER TABLE cricket.clean.player_clean_tbl
MODIFY COLUMN player_name SET NOT NULL;

ALTER TABLE cricket.clean.match_detail_clean
ADD CONSTRAINT pk_match_type_number PRIMARY KEY (match_type_number);

ALTER TABLE cricket.clean.player_clean_tbl
ADD CONSTRAINT fk_match_id
FOREIGN KEY (match_type_number)
REFERENCES cricket.clean.match_detail_clean (match_type_number);

--> Version lets extract the elements from the innings array
SELECT
    m.info:match_type_number::INT AS match_type_number,
    m.innings
FROM cricket.raw.match_raw_tbl m
WHERE match_type_number = 2729;

--> Version-2
SELECT
    m.info:match_type_number::INT AS match_type_number,
    i.value:team::TEXT AS team_name,
    i.*
FROM cricket.raw.match_raw_tbl m,
LATERAL FLATTEN (input => m.innings) i
WHERE match_type_number = 2729;

--> Version-3
--> innings
SELECT
    m.info:match_type_number::INT AS match_type_number,
    i.value:team::TEXT AS team_name,
    i.*
FROM cricket.raw.match_raw_tbl m,
LATERAL FLATTEN (input => m.innings) i
WHERE match_type_number = 2729;

--> overs played 
SELECT
    m.info:match_type_number::INT AS match_type_number,
    i.value:team::TEXT AS team_name,
    o.*
FROM cricket.raw.match_raw_tbl m,
LATERAL FLATTEN (input => m.innings) i,
LATERAL FLATTEN (input => i.value:overs) o
WHERE match_type_number = 2729;

--> Deliveries
SELECT
    m.info:match_type_number::INT AS match_type_number,
    i.value:team::TEXT AS team_name,
    d.*
FROM cricket.raw.match_raw_tbl m,
LATERAL FLATTEN (input => m.innings) i,
LATERAL FLATTEN (input => i.value:overs) o,
LATERAL FLATTEN (input => o.value:deliveries) d,
WHERE match_type_number = 2729;

--> Version-4
SELECT
    m.info:match_type_number::INT AS match_type_number,
    i.value:team::TEXT AS team_name,
    o.value:over::INT AS over,
    d.value:bowler::TEXT AS bowler,
    d.value:batter::TEXT AS batter,
    d.value:not_striker::TEXT AS non_striker,
    d.value:runs.batter::TEXT AS runs,
    d.value:runs.extras::TEXT AS extras,
    d.value:runs.total::TEXT AS total,
    e.*
FROM cricket.raw.match_raw_tbl m,
LATERAL FLATTEN (input => m.innings) i,
LATERAL FLATTEN (input => i.value:overs) o,
LATERAL FLATTEN (input => o.value:deliveries) d,
LATERAL FLATTEN (input => d.value:extras) e
WHERE match_type_number = 2729;

-->
SELECT
    m.info:match_type_number::INT AS match_type_number,
    i.value:team::TEXT AS team_name,
    o.value:over::INT+1 AS over,
    d.value:bowler::TEXT AS bowler,
    d.value:batter::TEXT AS batter,
    d.value:not_striker::TEXT AS non_striker,
    d.value:runs.batter::TEXT AS runs,
    d.value:runs.extras::TEXT AS extras,
    d.value:runs.total::TEXT AS total,
    e.key::TEXT AS extra_type,
    e.value::NUMBER AS extra_runs
    
FROM cricket.raw.match_raw_tbl m,
LATERAL FLATTEN (input => m.innings) i,
LATERAL FLATTEN (input => i.value:overs) o,
LATERAL FLATTEN (input => o.value:deliveries) d,
LATERAL FLATTEN (input => d.value:extras, outer => True) e
WHERE match_type_number = 2729;

--> Version-5
SELECT
    m.info:match_type_number::INT AS match_type_number,
    i.value:team::TEXT AS team_name,
    o.value:over::INT+1 AS over,
    d.value:bowler::TEXT AS bowler,
    d.value:batter::TEXT AS batter,
    d.value:not_striker::TEXT AS non_striker,
    d.value:runs.batter::TEXT AS runs,
    d.value:runs.extras::TEXT AS extras,
    d.value:runs.total::TEXT AS total,
    e.key::TEXT AS extra_type,
    e.value::NUMBER AS extra_runs,
    w.value:player_out::TEXT AS player_out,
    w.value:kind::TEXT AS player_out_kind,
    w.value:fielders::VARIANT AS player_out_fielders
    
FROM cricket.raw.match_raw_tbl m,
LATERAL FLATTEN (input => m.innings) i,
LATERAL FLATTEN (input => i.value:overs) o,
LATERAL FLATTEN (input => o.value:deliveries) d,
LATERAL FLATTEN (input => d.value:extras, outer => True) e,
LATERAL FLATTEN (input => d.value:wickets, outer => True) w
WHERE match_type_number = 2729;

select * from cricket.raw.match_raw_tbl limit 1;
--> Version-6
CREATE OR REPLACE TRANSIENT TABLE cricket.clean.delivery_clean_tbl As
SELECT
    m.info:match_type_number::INT AS match_type_number,
    i.info::team_id::INT AS team_id,
    i.value:team::TEXT AS team_name,
    o.value:over::INT+1 AS over,
    d.value:bowler::TEXT AS bowler,
    d.value:batter::TEXT AS batter,
    d.value:not_striker::TEXT AS non_striker,
    d.value:runs.batter::TEXT AS runs,
    d.value:runs.extras::TEXT AS extras,
    d.value:runs.total::TEXT AS total,
    e.key::TEXT AS extra_type,
    e.value::NUMBER AS extra_runs,
    w.value:player_out::TEXT AS player_out,
    w.value:kind::TEXT AS player_out_kind,
    w.value:fielders::VARIANT AS player_out_fielders,
    m.stg_file_name,
    m.stg_file_row_number,
    m.stg_file_hashkey,
    m.stg_modified_ts
    
FROM cricket.raw.match_raw_tbl m,
LATERAL FLATTEN (input => m.innings) i,
LATERAL FLATTEN (input => i.value:overs) o,
LATERAL FLATTEN (input => o.value:deliveries) d,
LATERAL FLATTEN (input => d.value:extras, outer => True) e,
LATERAL FLATTEN (input => d.value:wickets, outer => True) w;

*************
CREATE OR REPLACE TRANSIENT TABLE cricket.clean.delivery_clean_tbl AS
SELECT
    m.info:match_type_number::INT AS match_type_number,
    ii.value:team_id::INT AS team_id
    i.value:team::TEXT AS team_name,
    o.value:over::INT + 1 AS over,
    d.value:bowler::TEXT AS bowler,
    d.value:batter::TEXT AS batter,
    d.value:not_striker::TEXT AS non_striker,
    d.value:runs.batter::TEXT AS runs,
    d.value:runs.extras::TEXT AS extras,
    d.value:runs.total::TEXT AS total,
    e.key::TEXT AS extra_type,
    e.value::NUMBER AS extra_runs,
    w.value:player_out::TEXT AS player_out,
    w.value:kind::TEXT AS player_out_kind,
    w.value:fielders::VARIANT AS player_out_fielders,
    m.stg_file_name,
    m.stg_file_row_number,
    m.stg_file_hashkey,
    m.stg_modified_ts
FROM cricket.raw.match_raw_tbl m,
LATERAL FLATTEN(input => m.innings) i,
LATERAL FLATTEN(input => i.value:overs) o,
LATERAL FLATTEN(input => o.value:deliveries) d,
LATERAL FLATTEN(input => d.value:extras, outer => TRUE) e,
LATERAL FLATTEN(input => d.value:wickets, outer => TRUE) w,
LATERAL FLATTEN(input => d.value:team_id) i;
;
************
SELECT DISTINCT match_type_number FROM delivery_clean_tbl;

DESC TABLE cricket.clean.delivery_clean_tbl;

--> Add not null and fk relationship
ALTER TABLE cricket.clean.delivery_clean_tbl
MODIFY COLUMN match_type_number SET NOT NULL;

ALTER TABLE cricket.clean.delivery_clean_tbl
MODIFY COLUMN team_name SET NOT NULL;

ALTER TABLE cricket.clean.delivery_clean_tbl
MODIFY COLUMN over SET NOT NULL;

ALTER TABLE cricket.clean.delivery_clean_tbl
MODIFY COLUMN bowler SET NOT NULL;

ALTER TABLE cricket.clean.delivery_clean_tbl
MODIFY COLUMN batter SET NOT NULL;

ALTER TABLE cricket.clean.delivery_clean_tbl
MODIFY COLUMN non_striker SET NOT NULL;


--> fk relationship
ALTER TABLE cricket.clean.delivery_clean_tbl
ADD CONSTRAINT fk_delivery_match_id
FOREIGN KEY (match_type_number)
REFERENCES cricket.clean.match_detail_clean (match_type_number);

SELECT GET_DDL('table','delivery_clean_tbl');


--> Data Querry
USE ROLE sysadmin;
USE WAREHOUSE compute_wh;
USE SCHEMA cricket.clean;

--> lets quicklu validate the data set
--> India vs South Africa 
SELECT * FROM cricket.clean.match_detail_clean
WHERE match_type_number = 2729;

--> By batsman
SELECT 
    team_name,
    batter,
    SUM(runs)
FROM 
    delivery_clean_tbl
WHERE match_type_number = 2729
GROUP BY team_name,batter
ORDER BY 1,2,3 DESC;

--> By Team
SELECT 
   team_name,
   sum(runs) + sum(extra_runs)
FROM   
    delivery_clean_tbl
WHERE match_type_number = 2729
GROUP BY team_name
ORDER BY 1,2 DESC;


















   


  
